name: Deploy preview environment

on:
  workflow_call:
    inputs:
      IMAGE_NAME:
        required: true
        type: string
      IMAGE_TAG:
        required: true
        type: string
      TERRAFORM_WORKSPACE:
        required: true
        type: string
      TERRAFORM_VAR_FILE:
        required: false
        type: string
        default: "dev.tfvars"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  terraform:
    name: Run terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set up SSH key for custom terraform module
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add profile credentials to ~/.aws/credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile deploy
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile deploy

      - name: Terraform Format
        working-directory: terraform
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: terraform
        id: init
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        id: validate
        run: terraform validate -no-color

      - name: Set terraform workspace variable
        id: tf-workspace
        run: |
          echo "WORKSPACE=$(echo ${{ inputs.TERRAFORM_WORKSPACE }} | sed 's/\/\|_/-/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Create and change Terraform workspace
        working-directory: terraform
        id: workspace
        run: |
          terraform workspace select -or-create $WORKSPACE

      - name: Deploy preview environment
        working-directory: terraform
        id: deploy-preview
        if: github.event.action != 'closed'
        run: |
          terraform apply -auto-approve -var-file "${{ inputs.TERRAFORM_VAR_FILE }}" -no-color \
            -var "preview_name=$WORKSPACE" \
            -var "create_dns_record=true" \
            -var "task_image=${{ inputs.IMAGE_NAME }}" \
            -var "task_image_tag=${{ inputs.IMAGE_TAG }}"

      - name: Get deployment url for preview environment
        working-directory: terraform
        id: deploy-url
        if: github.event.action != 'closed'
        run: |
          terraform output -raw URL

      - name: Teardown preview environment
        working-directory: terraform
        id: teardown-preview
        if: github.event.action == 'closed' || github.event.pull_request.merged == true
        run: |
          terraform destroy -auto-approve -var-file "${{ inputs.TERRAFORM_VAR_FILE }}" -no-color \
            -var "preview_name=$WORKSPACE" \
            -var "create_dns_record=true" \
            -var "task_image=${{ inputs.IMAGE_NAME }}" \
            -var "task_image_tag=${{ inputs.IMAGE_TAG }}"
          terraform workspace select dev
          terraform workspace delete $WORKSPACE

      - name: Create and change Terraform workspace for dev
        working-directory: terraform
        id: workspace-dev
        if: github.event.action != 'closed'
        run: |
          terraform workspace select dev \
          || terraform workspace new dev

      - name: Terraform plan for merge to master
        working-directory: terraform
        id: plan-merge
        if: github.event.action != 'closed'
        run: |
          terraform plan -var-file "${{ inputs.TERRAFORM_VAR_FILE }}" -no-color \
            -var "task_image=${{ inputs.IMAGE_NAME }}" \
            -var "task_image_tag=latest"
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event.action != 'closed'
        env:
          PLAN: "terraform\n${{ steps.plan-merge.outputs.stdout }}"
          DEPLOY_URL: "${{ steps.deploy-url.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan-merge.outcome }}\`

            #### Preview environment 🔗
            [${ process.env.DEPLOY_URL }](${ process.env.DEPLOY_URL })

            <details><summary>Show plan for apply after merge to master</summary>

            \`\`\`hcl\n
            ${ process.env.PLAN }
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              })
            }

      - name: Terraform Plan Status for merge
        if: steps.plan-merge.outcome == 'failure'
        run: exit 1
